"""
기능: 모든 추출된 MD 파일에 버전 정보 추가
입력: 생성된 MD 파일들
출력: 버전 정보가 추가된 MD 파일들
"""

import os
import glob
from datetime import datetime

# 버전 정보 매핑
VERSION_INFO = {
    "output-14-layout-aware.md": {
        "script": "process-14-layout-aware-converter.py",
        "version": "v1.0",
        "description": "레이아웃 인식 변환기"
    },
    "2024_원가회계_헤딩_구조.md": {
        "script": "수동 작성",
        "version": "v1.0",
        "description": "구조 템플릿 초안"
    },
    "2024_원가회계_structured.md": {
        "script": "수동 작성 (사용자 취소)",
        "version": "v0.1",
        "description": "구조화 문서 초안"
    },
    "2024_원가회계_문제1_구조화.md": {
        "script": "process-16-simple-structure-filler.py",
        "version": "v1.0",
        "description": "간단한 구조 채우기"
    },
    "2024_2차_원가회계_전체_구조화.md": {
        "script": "process-17-improved-structure-extractor.py",
        "version": "v1.0",
        "description": "개선된 구조 추출기"
    },
    "2024_2차_원가회계_정확한_추출.md": {
        "script": "process-18-accurate-content-extractor.py",
        "version": "v1.0",
        "description": "정확한 내용 추출기"
    },
    "2024_2차_원가회계_문제1_수동추출.md": {
        "script": "process-19-manual-structure-filler.py",
        "version": "v1.0",
        "description": "수동 구조 채우기"
    }
}

def add_version_header(content: str, file_name: str) -> str:
    """파일 내용에 버전 헤더 추가"""
    info = VERSION_INFO.get(file_name, {
        "script": "Unknown",
        "version": "Unknown",
        "description": "Unknown"
    })
    
    header = f"""<!--
Generated by: {info['script']} ({info['version']})
Description: {info['description']}
Generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
-->

"""
    
    # 이미 버전 정보가 있는지 확인
    if content.startswith("<!--\nGenerated by:"):
        # 기존 버전 정보 제거
        end_index = content.find("-->\n\n")
        if end_index != -1:
            content = content[end_index + 5:]
    
    return header + content

def process_file(file_path: str):
    """파일 처리"""
    file_name = os.path.basename(file_path)
    
    # 파일 읽기
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 버전 정보 추가
    updated_content = add_version_header(content, file_name)
    
    # 파일 쓰기
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(updated_content)
    
    print(f"✅ 버전 정보 추가: {file_path}")

def main():
    # 처리할 파일들
    files_to_process = [
        "output-14-layout-aware.md",
        "2024_원가회계_헤딩_구조.md",
        "2024_원가회계_structured.md",
        "output/structured/2024_원가회계_문제1_구조화.md",
        "output/structured/2024_2차_원가회계_전체_구조화.md",
        "output/structured/2024_2차_원가회계_정확한_추출.md",
        "output/structured/2024_2차_원가회계_문제1_수동추출.md"
    ]
    
    # 구조 템플릿 파일들도 추가
    template_files = glob.glob("structure-templates/*.md")
    
    for template in template_files:
        file_name = os.path.basename(template)
        VERSION_INFO[file_name] = {
            "script": "수동 작성",
            "version": "v1.0",
            "description": "구조 템플릿"
        }
        files_to_process.append(template)
    
    # 각 파일 처리
    processed = 0
    for file_path in files_to_process:
        if os.path.exists(file_path):
            process_file(file_path)
            processed += 1
        else:
            print(f"⚠️  파일 없음: {file_path}")
    
    print(f"\n총 {processed}개 파일에 버전 정보 추가 완료")

if __name__ == "__main__":
    main()