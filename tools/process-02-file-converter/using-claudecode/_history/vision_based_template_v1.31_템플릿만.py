"""
기능: Vision 분석 결과 기반 정확한 템플릿 생성
입력: 캐시된 PDF 분석 데이터 + Vision 분석 결과
출력: 완성도 높은 구조 템플릿
"""

import json
from pathlib import Path
from typing import Dict, List


class VisionBasedTemplate:
    def __init__(self):
        # Vision 분석으로 파악한 정확한 구조
        self.vision_structure = {
            "문제1": {
                "점수": 24,
                "주제": "보조부문 원가배분과 개별원가계산",
                "자료": {
                    1: {
                        "제목": "보조부문 원가배분 정책",
                        "내용": "㈜한국은 두 개의 보조부문(수선부문, 식당부문)과 세 개의 제조부문(X부문, Y부문, Z부문)으로 구성. 이중배분율(dual-rate) 적용.",
                        "표": [
                            {
                                "설명": "부문별 예산/실제 용역량",
                                "크기": "6×6",
                                "헤더": ["사용부문/제공부문", "보조부문(수선,식당)", "제조부문(X,Y,Z)"]
                            },
                            {
                                "설명": "보조부문 원가 정보",
                                "크기": "3×3",
                                "내용": ["실제 변동원가", "실제 고정원가"]
                            }
                        ]
                    },
                    2: {
                        "제목": "실제개별원가계산 정보",
                        "내용": "㈜한국은 실제개별원가계산을 적용하며, 개별법으로 재고자산을 평가. 제조간접원가를 각 제조부문별 배부기준에 따라 배부.",
                        "표": [
                            {
                                "설명": "작업별 기계가동시간과 직접노무시간",
                                "크기": "4×7",
                                "작업": ["#104", "#201", "#202"]
                            },
                            {
                                "설명": "작업별 직접재료원가와 직접노무원가",
                                "크기": "4×3"
                            },
                            {
                                "설명": "부문별 보조부문원가 배분 후 제조간접원가",
                                "크기": "2×4"
                            }
                        ]
                    }
                },
                "물음": {
                    1: {"내용": "상호배분법을 적용하여 보조부문의 원가를 배분할 때, 각 제조부문에 배분되는 금액을 계산하시오.", "답안표": True},
                    2: {"내용": "㈜한국은 두 개의 보조부문을 폐쇄하고 외주업체를 통해 해당 용역을 공급받을지 여부를 검토하고 있다. 해당 의사결정에서 고려해야 하는 질적 판단기준을 3가지 서술하시오.", "답안표": False},
                    3: {"내용": "보조부문 원가를 이중배분율(dual-rate)을 적용하여 제조부문에 배분할 때 발생할 수 있는 문제점을 2가지 서술하시오.", "답안표": False},
                    4: {"내용": "각 제조부문별 실제 제조간접원가 배부율을 계산하시오.", "답안표": True},
                    5: {"내용": "20x1년 말의 재공품, 제품, 매출원가 잔액을 각각 계산하시오.", "답안표": True},
                    6: {"내용": "외부 전문가는 ㈜한국의 경영자에게 정상원가계산(평준화원가계산)의 도입을 권유하고 있다. 실제원가계산과 비교했을 때 정상원가계산 도입의 유용성 2가지를 의사결정 측면에서 설명하시오.", "답안표": False}
                }
            }
        }
    
    def generate_enhanced_template(self):
        """Vision 분석 결과를 활용한 정교한 템플릿 생성"""
        lines = []
        lines.append("<!--")
        lines.append("Generated by: vision_based_template_v1.31.py")
        lines.append("Description: Vision 분석 기반 정확한 구조 템플릿")
        lines.append("Generated at: 2025-01-12")
        lines.append("-->")
        lines.append("")
        lines.append("# 2024년 2차 원가회계 기출문제 - 정확한 구조 템플릿")
        lines.append("")
        
        # 문제별 처리
        for prob_key, prob_data in self.vision_structure.items():
            prob_num = int(prob_key.replace("문제", ""))
            
            lines.append(f"## 【문제 {prob_num}】 ({prob_data['점수']}점)")
            lines.append(f"주제: {prob_data['주제']}")
            lines.append("")
            
            # 자료 섹션
            for mat_num, mat_data in prob_data.get('자료', {}).items():
                lines.append(f"### <자료 {mat_num}>")
                lines.append("```")
                lines.append(f"제목: {mat_data['제목']}")
                lines.append(f"내용: {mat_data['내용']}")
                lines.append("```")
                lines.append("")
                
                # 표 정보
                for idx, table in enumerate(mat_data.get('표', [])):
                    lines.append(f"#### 표 {mat_num}-{idx+1}: {table['설명']}")
                    lines.append(f"- 크기: {table['크기']}")
                    if '헤더' in table:
                        lines.append(f"- 헤더: {table['헤더']}")
                    if '작업' in table:
                        lines.append(f"- 작업: {table['작업']}")
                    lines.append(f"<!-- 문{prob_num}-자료{mat_num}-표{idx+1} -->")
                    lines.append("")
            
            # 물음 섹션
            questions = prob_data.get('물음', {})
            if questions:
                q_nums = list(questions.keys())
                lines.append(f"### 물음 범위")
                lines.append(f"※ <자료 1>~<자료 {len(prob_data.get('자료', {}))}> 를 이용하여 (물음 {min(q_nums)})∼(물음 {max(q_nums)})에 답하시오.")
                lines.append("")
                
                for q_num, q_data in questions.items():
                    lines.append(f"#### (물음 {q_num})")
                    lines.append(q_data['내용'])
                    
                    if q_data.get('답안표'):
                        lines.append("")
                        lines.append("**[답안양식]**")
                        lines.append(f"<!-- 문{prob_num}-물음{q_num}-답안표 -->")
                    lines.append("")
        
        return '\n'.join(lines)
    
    def create_extraction_guide(self):
        """추출 가이드 생성"""
        guide = {
            "extraction_strategy": {
                "step1": "PDF 전체를 빠르게 스캔하여 페이지별 복잡도 계산",
                "step2": "복잡한 페이지(표 많음, 2단 편집)만 이미지로 변환",
                "step3": "Vision으로 정확한 구조 파악",
                "step4": "파악된 구조를 기반으로 텍스트와 표 추출"
            },
            "table_extraction": {
                "method1": "pdfplumber의 extract_tables() 사용",
                "method2": "Vision API로 표 구조 파악",
                "method3": "좌표 기반으로 정확한 셀 추출"
            },
            "quality_check": {
                "글상자": "자료 제목과 내용이 완전히 추출되었는지 확인",
                "표": "행/열 수가 예상과 일치하는지 확인",
                "물음": "번호와 내용이 올바른 순서인지 확인"
            }
        }
        
        return guide


def main():
    # 템플릿 생성기
    generator = VisionBasedTemplate()
    
    # 1. 정교한 템플릿 생성
    print("=== Vision 기반 템플릿 생성 ===")
    template = generator.generate_enhanced_template()
    
    # 템플릿 저장
    output_path = Path("documentation/2024_원가회계_vision_template.md")
    output_path.parent.mkdir(exist_ok=True)
    output_path.write_text(template, encoding='utf-8')
    print(f"템플릿 저장: {output_path}")
    
    # 2. 추출 가이드 생성
    guide = generator.create_extraction_guide()
    
    guide_path = Path("documentation/extraction_guide.json")
    with open(guide_path, 'w', encoding='utf-8') as f:
        json.dump(guide, f, ensure_ascii=False, indent=2)
    print(f"추출 가이드 저장: {guide_path}")
    
    # 3. 다음 단계 안내
    print("\n=== 다음 단계 ===")
    print("1. 생성된 템플릿 확인: documentation/2024_원가회계_vision_template.md")
    print("2. 나머지 페이지도 Vision 분석 필요시 추가 실행")
    print("3. 템플릿 기반으로 실제 데이터 추출 진행")


if __name__ == "__main__":
    main()